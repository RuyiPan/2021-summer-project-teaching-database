fit_cv <- try(ordinalNetCV(X, Y, family="cumulative", tuneMethod="aic",
link="logit", alpha=1, parallelTerms=TRUE,
nonparallelTerms=FALSE, standardize =T), silent=T)
fit_ONP <- ordinalNet(X, Y, family="cumulative", link="logit", alpha=1,
parallelTerms=TRUE, nonparallelTerms=FALSE,
lambdaVals=summary(fit_cv)$lambda[1])
fit_ONP
fit_ONP$coefs
res <- table(Y, predict(fit_ONP, type = 'class'))
res
sum(diag(res))/sum(res)
X <- as.matrix(data_dummies[, c(1:2, 8:18)])
Y <- as.factor(data_dummies$Quality)
# Try using aic instead -> leads to less shrinkage.
fit_cv <- try(ordinalNetCV(X, Y, family="cumulative", tuneMethod="bic",
link="logit", alpha=1, parallelTerms=TRUE,
nonparallelTerms=FALSE, standardize =T), silent=T)
fit_ONP <- ordinalNet(X, Y, family="cumulative", link="logit", alpha=1,
parallelTerms=TRUE, nonparallelTerms=FALSE,
lambdaVals=summary(fit_cv)$lambda[1])
fit_ONP
fit_ONP$coefs
res <- table(Y, predict(fit_ONP, type = 'class'))
res
sum(diag(res))/sum(res)
# Try using aic instead -> leads to less shrinkage.
fit_cv <- try(ordinalNetCV(X, Y, family="cumulative", tuneMethod="aic",
link="logit", alpha=1, parallelTerms=TRUE,
nonparallelTerms=FALSE, standardize =T), silent=T)
fit_ONP <- ordinalNet(X, Y, family="cumulative", link="logit", alpha=1,
parallelTerms=TRUE, nonparallelTerms=FALSE,
lambdaVals=summary(fit_cv)$lambda[1])
fit_ONP
fit_ONP$coefs
res <- table(Y, predict(fit_ONP, type = 'class'))
res
sum(diag(res))/sum(res)
X <- as.matrix(data_dummies[, c(1:2, 8:38)])
Y <- as.factor(data_dummies$Quality)
# Try using aic instead -> leads to less shrinkage.
fit_cv <- try(ordinalNetCV(X, Y, family="cumulative", tuneMethod="bic",
link="logit", alpha=1, parallelTerms=TRUE,
nonparallelTerms=FALSE, standardize =T), silent=T)
fit_ONP <- ordinalNet(X, Y, family="cumulative", link="logit", alpha=1,
parallelTerms=TRUE, nonparallelTerms=FALSE,
lambdaVals=summary(fit_cv)$lambda[1])
fit_ONP
fit_ONP$coefs
res <- table(Y, predict(fit_ONP, type = 'class'))
res
sum(diag(res))/sum(res)
# Try using aic instead -> leads to less shrinkage.
fit_cv <- try(ordinalNetCV(X, Y, family="cumulative", tuneMethod="aic",
link="logit", alpha=1, parallelTerms=TRUE,
nonparallelTerms=FALSE, standardize =T), silent=T)
fit_ONP <- ordinalNet(X, Y, family="cumulative", link="logit", alpha=1,
parallelTerms=TRUE, nonparallelTerms=FALSE,
lambdaVals=summary(fit_cv)$lambda[1])
fit_ONP
fit_ONP$coefs
res <- table(Y, predict(fit_ONP, type = 'class'))
res
sum(diag(res))/sum(res)
fit_ONP$coefs
data1$Quality <- as.factor(data1$Quality)
clm(Quality ~ . , data= data1)
colnames(data1)
data_dummies$Quality <- as.factor(data_dummies$Quality)
clm(Quality ~ . , data= data1)
colnames(data_dummies)
data_dummies$Quality <- as.factor(data_dummies$Quality)
clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
predict(model1, type="class")
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(Y, predict(model1, type="class"))
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class"))
predict(model1, type="class")
predict(model1, type="class")
data_dummies$Quality
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
summary(model1)
summary(model1)
nominal_test(model1)
vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, predict(model2, type="class")$fit)
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, predict(model2, type="class"))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, predict(model2, type="response"))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
predict(model2)
res <- table(data_dummies$Quality, predict(model2, type="response"))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
predict(model2, type="response")
res <- table(data_dummies$Quality, predict(model2, ))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
predict(model2, type="terms")
res <- table(data_dummies$Quality, predict(model2, ))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
predict(model2, type="response")
res <- table(data_dummies$Quality, predict(model2, ))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
apply(predict(model2, type="response"), 2, max)
res <- table(data_dummies$Quality, predict(model2, ))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
apply(predict(model2, type="response"), 1, which.max)
res <- table(data_dummies$Quality, predict(model2, ))
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, apply(predict(model2, type="response"), 1, which.max))
res
sum(diag(res))/sum(res)
```{r}
model3 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, apply(predict(model2, type="response"), 1, which.max))
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res
sum(diag(res))/sum(res)
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, apply(predict(model2, type="response"), 1, which.max))
res
sum(diag(res))/sum(res)
model4 <- vglm(Sophistication  ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model4)
res <- table(data_dummies$Sophistication , apply(predict(model4, type="response"), 1, which.max))
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
knitr::opts_chunk$set(
echo = FALSE, eval = TRUE,
message = FALSE, warning = FALSE
)
require(readxl)
data <- read_excel("data/merged_data_NR_July25.xlsx")
model_data <- data %>% dplyr::select(
Source_Type,
Publication_Date,
Scientific_Field,
General_Concept,
Specific_Concept,
{
"Quality (NR) (1 best)"
},
{
"Statistical Sophistication (1 best)"
}
)
require(readxl)
data <- read_excel("data/merged_data_NR_Aug3.xlsx")
model_data <- data %>% dplyr::select(
Source_Type,
Publication_Date,
Scientific_Field,
General_Concept,
Specific_Concept,
{
"Quality (NR) (1 best)"
},
{
"Statistical Sophistication (1 best)"
}
)
library(tidyverse)
# Modelling
library("ordinalNet")
library("ordinal")
library("numDeriv")
library("glmnet")
library("MASS")
library("VGAM")
library("glmpathcr")
library("fastDummies")
# string
library(sjmisc)
library(stringi)
library(cvms)
library(broom)
library(tibble)
library(ggimage)
#> Loading required package: ggplot2
library(rsvg)
require(readxl)
data <- read_excel("data/merged_data_NR_Aug3.xlsx")
colnames(data)
colnames(data)
model_data <- data %>% dplyr::select(
Source_Type,
Publication_Date,
Scientific_Field,
General_Concept,
Specific_Concept,
{
"Quality (NR) (1 best)"
},
{
"Statistical Sophistication (1 best)"
}
)
colnames(model_data) <- c(
"Source_Type", "Date", "Scientific_Field",
"General_Concept", "Specific_Concept", "Quality", "Sophistication"
)
## Extract news with labels
data1 <- model_data %>%
filter(!is.na(Quality) & Quality != "x")
modified_data1 <- data1 %>%
mutate(
num_sepcific_concept = lengths(gregexpr(",", Specific_Concept)) + 1,
num_general_concept = lengths(gregexpr(",", General_Concept)) + 1,
Type = case_when(
grepl("News", Source_Type)  ~ "News",
grepl("Journal", Source_Type) ~ "Journal",
grepl("Paper", Source_Type) ~ "Paper",
grepl("Report", Source_Type) ~ "Report",
grepl("Webpage", Source_Type) ~ "Webpage",
T ~ "Other"
),
Field = tolower(stri_extract(Scientific_Field, regex='[^,]*')),
Concept = tolower(stri_extract(General_Concept, regex='[^,]*'))
) %>%
dplyr:: select(num_sepcific_concept,
num_general_concept,
Type,
Field,
Concept,
Quality,
Sophistication)
data_dummies <- fastDummies::dummy_cols(modified_data1)
colnames(data_dummies)
X <- as.matrix(data_dummies[, c(1:2, 8:38)])
Y <- as.factor(data_dummies$Sophistication)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
## Extract news with labels
data1 <- model_data %>%
filter(!is.na(Quality) & Quality != "x")
modified_data1 <- data1 %>%
mutate(
num_sepcific_concept = lengths(gregexpr(",", Specific_Concept)) + 1,
num_general_concept = lengths(gregexpr(",", General_Concept)) + 1,
Type = case_when(
grepl("News", Source_Type)  ~ "News",
grepl("Journal", Source_Type) ~ "Journal",
grepl("Paper", Source_Type) ~ "Paper",
grepl("Report", Source_Type) ~ "Report",
grepl("Webpage", Source_Type) ~ "Webpage",
T ~ "Other"
),
Field = tolower(stri_extract(Scientific_Field, regex='[^,]*')),
Concept = tolower(stri_extract(General_Concept, regex='[^,]*'))
) %>%
dplyr:: select(num_sepcific_concept,
num_general_concept,
Type,
Field,
Concept,
Quality,
Sophistication)
data_dummies <- fastDummies::dummy_cols(modified_data1)
colnames(data_dummies)
# Regularized Ordinal Regression and the ordinalNet R Package
# https://arxiv.org/abs/1706.05003
fit_cv <- try(ordinalNetCV(X, Y, family="cumulative", tuneMethod="bic",
link="logit", alpha=1, parallelTerms=TRUE,
nonparallelTerms=FALSE, standardize =T), silent=T)
fit_ONP <- ordinalNet(X, Y, family="cumulative", link="logit", alpha=1,
parallelTerms=TRUE, nonparallelTerms=FALSE,
lambdaVals=summary(fit_cv)$lambda[1])
fit_ONP
fit_ONP$coefs
res <- table(Y, predict(fit_ONP, type = 'class'))
sum(diag(res))/sum(res)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
library(ggplot2)
cm_frame <- as.data.frame(res)
colnames(cm_frame) <- c("Target","Prediction","N")
cm_frame
new_frame <- cm_frame%>%mutate(Prediction=ifelse(Prediction==1,"A",ifelse(Prediction==2, "B", "C")), Target=ifelse(Target==1,"A",ifelse(Target==2, "B", "C")))
new_frame
ggplot(new_frame, mapping=aes(x=Prediction,y=Target, fill= N)) +
geom_tile() + geom_text(aes(label = sprintf("%1.0f",N)), vjust = 1)+
scale_fill_gradient(low="white", high="deepskyblue") +
labs(y = "Target Quality Status",x = "Predicted Quality Status") +
scale_x_discrete(labels=c("High","Middle","Low"),position = "top") +
scale_y_discrete(labels=c("Low","Middle","High"),limits=rev)+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"),legend.position = "none")
summary(model1)
chi_test <- nominal_test(model1)
chi_test
model2_1 <- clm(Quality~ 1  , data= data_dummies)
model2_2 <- clm(Quality~ num_sepcific_concept  , data= data_dummies)
model2_3 <- clm(Quality~ num_sepcific_concept + num_general_concept  , data= data_dummies)
model2_4 <- clm(Quality~ num_sepcific_concept + num_general_concept + Type  , data= data_dummies)
model2_5 <- clm(Quality~ num_sepcific_concept + num_general_concept + Type + Field , data= data_dummies)
anova(model2_1, model2_2)
anova(model2_2, model2_3)
anova(model2_3, model2_4)
anova(model2_4, model2_5)
anova(model2_5, model1)
model2 <- vglm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept,family=cumulative(parallel=TRUE), data=data_dummies)
summary(model2)
res <- table(data_dummies$Quality, apply(predict(model2, type="response"), 1, which.max))
res
sum(diag(res))/sum(res)
data_dummies$Sophistication <- as.factor(data_dummies$Sophistication)
model3 <- clm(Sophistication~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res3 <- table(data_dummies$Sophistication ,predict(model3, type="class")$fit)
res3
sum(diag(res3))/sum(res3)
nominal_test(model3)
## Extract news with labels
data1 <- model_data %>%
filter(!is.na(Quality) & Quality != "x")
modified_data1 <- data1 %>%
mutate(
num_sepcific_concept = lengths(gregexpr(",", Specific_Concept)) + 1,
num_general_concept = lengths(gregexpr(",", General_Concept)) + 1,
Type = case_when(
grepl("News", Source_Type)  ~ "News",
grepl("Journal", Source_Type) ~ "Journal",
grepl("Paper", Source_Type) ~ "Paper",
grepl("Report", Source_Type) ~ "Report",
grepl("Webpage", Source_Type) ~ "Webpage",
T ~ "Other"
),
Field = tolower(stri_extract(Scientific_Field, regex='[^,]*')),
Concept = tolower(stri_extract(General_Concept, regex='[^,]*'))
) %>%
dplyr:: select(num_sepcific_concept,
num_general_concept,
Type,
Field,
Concept,
Quality,
Sophistication)
data_dummies <- fastDummies::dummy_cols(modified_data1)
colnames(data_dummies)
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
data_dummies$Quality
data_dummies
data_dummies$num_sepcific_concept
data_dummies$num_sepcific_concept
data_dummies$num_general_concept
data_dummies$num_sepcific_concept
data_dummies$num_general_concept
data_dummies$Type
data_dummies$num_sepcific_concept
data_dummies$num_general_concept
data_dummies$Type
data_dummies$Field
data_dummies$num_sepcific_concept
data_dummies$num_general_concept
data_dummies$Type
data_dummies$Field
data_dummies$Concept
data_dummies$Quality <- as.factor(data_dummies$Quality)
model1 <- clm(Quality ~ num_sepcific_concept + num_general_concept + Type + Field + Concept , data= data_dummies)
res <- table(data_dummies$Quality, predict(model1, type="class")$fit)
res
sum(diag(res))/sum(res)
View(modified_data1)
View(modified_data1)
